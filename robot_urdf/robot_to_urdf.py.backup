#!/usr/bin/env python
import xml.etree.ElementTree as ET
import xml.dom.minidom as minidom
import numpy as np

NUM_LEGS = 4
BODY_MASS = 1
LEG_MASS = 1
BASE_LINK_NAME = "base_link"
BASE_LINK_EXTENTS = np.array([1.2, 0.2, 0.2])
LEG_LINK_EXTENTS = np.array([0.1, 0.1, 0.3])
BASE_ORIGIN = [0, 0, 0.0]

def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="\t")

def add_link(robot, origin_val, name, extents, mass_val, material_val="green", color_val = [0, 1, 0, 1]):
	link = ET.SubElement(robot, "link")
	link.attrib["name"] = name

	inertial = ET.SubElement(link, "inertial")

	origin = ET.SubElement(inertial, "origin")
	origin.attrib['xyz'] = str(origin_val[0]) + " " + str(origin_val[1]) + " " + str(origin_val[2])
	origin.attrib['rpy'] = "0 0 0"
	
	mass = ET.SubElement(inertial, "mass")

	mass.attrib['value'] = str(mass_val)
	

	inertia = ET.SubElement(inertial, "inertia")

	#TODO: clean these up:
	inertia.attrib['ixx'] = "1"
	inertia.attrib['ixy'] = "0"
	inertia.attrib['ixz'] = "0"
	inertia.attrib['iyy'] = "1"
	inertia.attrib['iyz'] = "0"
	inertia.attrib['izz'] = "1"


	#############VISUAL SECTION################
	visual = ET.SubElement(link, "visual")

	origin = ET.SubElement(visual, "origin")
	origin.attrib['xyz'] = str(origin_val[0]) + " " + str(origin_val[1]) + " " + str(origin_val[2])
	origin.attrib['rpy'] = "0 0 0"

	geometry = ET.SubElement(visual, "geometry")

	box = ET.SubElement(geometry, "box")
	box.attrib['size'] = str(extents[0]) + " " + str(extents[1]) + " " + str(extents[2])

	material = ET.SubElement(visual, "material")
	material.attrib['name'] = material_val

	color = ET.SubElement(material, "color")
	color.attrib['rgba'] = str(color_val[0]) + " " + str(color_val[1]) + " " + str(color_val[2]) + " " + str(color_val[3])


	#################COLLISION SECTION###########
	collision = ET.SubElement(link, "collision")
	origin = ET.SubElement(collision, "origin")
	origin.attrib['xyz'] = str(origin_val[0]) + " " + str(origin_val[1]) + " " + str(origin_val[2])
	origin.attrib['rpy'] = "0 0 0"

	geometry = ET.SubElement(collision, "geometry")

	box = ET.SubElement(geometry, "box")
	box.attrib['size'] = str(extents[0]) + " " + str(extents[1]) + " " + str(extents[2])



def add_joint(robot, name, BASE_LINK_NAME, leg_link, origin_val, damping):
	joint = ET.SubElement(robot, "joint")
	joint.attrib['name'] = name
	joint.attrib['type'] = "continuous"

	parent = ET.SubElement(joint, "parent")
	parent.attrib['link'] = BASE_LINK_NAME

	child = ET.SubElement(joint, "child")
	child.attrib['link'] = leg_link

	origin = ET.SubElement(joint, "origin")
	origin.attrib['xyz'] = str(origin_val[0]) + " " + str(origin_val[1]) + " " + str(origin_val[2])

	axis = ET.SubElement(joint, "axis")
	axis.attrib['xyz'] = "0 1 0"

	dynamics = ET.SubElement(joint, "dynamics")
	dynamics.attrib['damping'] = str(damping)





def add_transmission(robot, joint_name):
	transmission = ET.SubElement(robot, "transmission")
	transmission.attrib['type'] = "SimpleTransmission"
	transmission.attrib['name'] = joint_name + "_trans"

	actuator = ET.SubElement(transmission, "actuator")
	actuator.attrib['name'] = joint_name + "_torque"

	joint = ET.SubElement(transmission, "joint")
	joint.attrib['name'] = joint_name

	mechanical_reduction = ET.SubElement(transmission, "mechanicalReduction")
	mechanical_reduction.text = "1"


def set_frame(robot, parent_name):
	frame = ET.SubElement(robot, "frame")
	frame.attrib['name'] = parent_name + "_frame"
	frame.attrib['link'] = parent_name
	frame.attrib['xyz'] = "0 0 0"
	frame.attrib['rpy'] = "0 0 0"



def create_file():

	robot = ET.Element("robot")
	robot.attrib['xmlns'] = "http://drake.mit.edu"
	robot.attrib['xmlns:xsi'] = "http://www.w3.org/2001/XMLSchema-instance"
	robot.attrib['xsi:schemaLocation'] = "http://drake.mit.edu ../../doc/drakeURDF.xsd"
	robot.attrib['name'] = 'Ant'
	
	add_link(robot, BASE_ORIGIN, BASE_LINK_NAME, BASE_LINK_EXTENTS, BODY_MASS)


	for i in range(NUM_LEGS):
		link_name = "leg_link" + str(i)
		add_link(robot, [0, 0, LEG_LINK_EXTENTS[2] / 2.0], link_name, LEG_LINK_EXTENTS, LEG_MASS, material_val = "red", color_val = [1, 0, 0, 1])
		#TODO: change origin

		n = NUM_LEGS / 2

		x = BASE_ORIGIN[0] + BASE_LINK_EXTENTS[0] * float(i  / 2 + 1) / float(n + 1) - BASE_LINK_EXTENTS[0]/2.0

		if i % 2 == 0:
			y = BASE_ORIGIN[1] - BASE_LINK_EXTENTS[1]/2.0 - LEG_LINK_EXTENTS[1] / 2.0
		else:
			y = BASE_ORIGIN[1] + BASE_LINK_EXTENTS[1]/2 + BASE_LINK_EXTENTS[1] / 2.0

		#z = BASE_ORIGIN[2] - LEG_LINK_EXTENTS[2] / 2.0
		z = 0.0

		joint_name = "leg_joint" + str(i)
		add_joint(robot, joint_name, BASE_LINK_NAME, link_name, [x, y, z], 0.1)

		add_transmission(robot, joint_name)

	set_frame(robot, BASE_LINK_NAME)

	tree = ET.ElementTree(robot)
	f = open("Ant.urdf", "w")
	f.write(prettify(robot))
	f.close()

	print prettify(robot)




if __name__ == '__main__':
    create_file()
